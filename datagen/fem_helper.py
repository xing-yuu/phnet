import torch
import numpy as np
import pyvista as pv

def stiffness_force(hex, elastic_tensor):
    """compute the stiffness of a hex element and its gradients w.r.t a single parameter

    Args:
        hex ([type]): 8 * 3
        elastic_tensor ([type]): 6 * 6
        elastic_grad ([type]): 6 * 6


    Returns:
         stiffness [type]: 24*24
         grad [type] 24*24
    """

    # partial_N ([type]): 27 * 3 * 8
    # weights ([type]): 27 * 1

    partial_N = torch.as_tensor([[[-3.93649191e-01, 3.93649191e-01, 4.99999970e-02, -4.99999970e-02, -4.99999970e-02, 4.99999970e-02, 6.35083159e-03, -6.35083159e-03],
                                [-3.93649191e-01, -4.99999970e-02, 4.99999970e-02, 3.93649191e-01, -
                                    4.99999970e-02, -6.35083159e-03, 6.35083159e-03, 4.99999970e-02],
        [-3.93649191e-01, -4.99999970e-02, -6.35083159e-03, -4.99999970e-02, 3.93649191e-01, 4.99999970e-02, 6.35083159e-03, 4.99999970e-02]],

        [[-2.21824586e-01, 2.21824586e-01, 2.81754136e-02, -2.81754136e-02, -2.21824586e-01, 2.21824586e-01, 2.81754136e-02, -2.81754136e-02],
         [-2.21824586e-01, -2.81754136e-02, 2.81754136e-02, 2.21824586e-01, -
          2.21824586e-01, -2.81754136e-02, 2.81754136e-02, 2.21824586e-01],
         [-3.93649191e-01, -4.99999970e-02, -6.35083159e-03, -4.99999970e-02, 3.93649191e-01, 4.99999970e-02, 6.35083159e-03, 4.99999970e-02]],

        [[-4.99999970e-02, 4.99999970e-02, 6.35083159e-03, -6.35083159e-03, -3.93649191e-01, 3.93649191e-01, 4.99999970e-02, -4.99999970e-02],
         [-4.99999970e-02, -6.35083159e-03, 6.35083159e-03, 4.99999970e-02, -
             3.93649191e-01, -4.99999970e-02, 4.99999970e-02, 3.93649191e-01],
         [-3.93649191e-01, -4.99999970e-02, -6.35083159e-03, -4.99999970e-02, 3.93649191e-01, 4.99999970e-02, 6.35083159e-03, 4.99999970e-02]],

        [[-2.21824586e-01, 2.21824586e-01, 2.21824586e-01, -2.21824586e-01, -2.81754136e-02, 2.81754136e-02, 2.81754136e-02, -2.81754136e-02],
         [-3.93649191e-01, -4.99999970e-02, 4.99999970e-02, 3.93649191e-01, -
             4.99999970e-02, -6.35083159e-03, 6.35083159e-03, 4.99999970e-02],
         [-2.21824586e-01, -2.81754136e-02, -2.81754136e-02, -2.21824586e-01, 2.21824586e-01, 2.81754136e-02, 2.81754136e-02, 2.21824586e-01]],

        [[-1.25000000e-01, 1.25000000e-01, 1.25000000e-01, -1.25000000e-01, -1.25000000e-01, 1.25000000e-01, 1.25000000e-01, -1.25000000e-01],
         [-2.21824586e-01, -2.81754136e-02, 2.81754136e-02, 2.21824586e-01, -
             2.21824586e-01, -2.81754136e-02, 2.81754136e-02, 2.21824586e-01],
         [-2.21824586e-01, -2.81754136e-02, -2.81754136e-02, -2.21824586e-01, 2.21824586e-01, 2.81754136e-02, 2.81754136e-02, 2.21824586e-01]],

        [[-2.81754136e-02, 2.81754136e-02, 2.81754136e-02, -2.81754136e-02, -2.21824586e-01, 2.21824586e-01, 2.21824586e-01, -2.21824586e-01],
         [-4.99999970e-02, -6.35083159e-03, 6.35083159e-03, 4.99999970e-02, -
             3.93649191e-01, -4.99999970e-02, 4.99999970e-02, 3.93649191e-01],
         [-2.21824586e-01, -2.81754136e-02, -2.81754136e-02, -2.21824586e-01, 2.21824586e-01, 2.81754136e-02, 2.81754136e-02, 2.21824586e-01]],

        [[-4.99999970e-02, 4.99999970e-02, 3.93649191e-01, -3.93649191e-01, -6.35083159e-03, 6.35083159e-03, 4.99999970e-02, -4.99999970e-02],
         [-3.93649191e-01, -4.99999970e-02, 4.99999970e-02, 3.93649191e-01, -
             4.99999970e-02, -6.35083159e-03, 6.35083159e-03, 4.99999970e-02],
         [-4.99999970e-02, -6.35083159e-03, -4.99999970e-02, -3.93649191e-01, 4.99999970e-02, 6.35083159e-03, 4.99999970e-02, 3.93649191e-01]],

        [[-2.81754136e-02, 2.81754136e-02, 2.21824586e-01, -2.21824586e-01, -2.81754136e-02, 2.81754136e-02, 2.21824586e-01, -2.21824586e-01],
         [-2.21824586e-01, -2.81754136e-02, 2.81754136e-02, 2.21824586e-01, -
             2.21824586e-01, -2.81754136e-02, 2.81754136e-02, 2.21824586e-01],
         [-4.99999970e-02, -6.35083159e-03, -4.99999970e-02, -3.93649191e-01, 4.99999970e-02, 6.35083159e-03, 4.99999970e-02, 3.93649191e-01]],

        [[-6.35083159e-03, 6.35083159e-03, 4.99999970e-02, -4.99999970e-02, -4.99999970e-02, 4.99999970e-02, 3.93649191e-01, -3.93649191e-01],
         [-4.99999970e-02, -6.35083159e-03, 6.35083159e-03, 4.99999970e-02, -
             3.93649191e-01, -4.99999970e-02, 4.99999970e-02, 3.93649191e-01],
         [-4.99999970e-02, -6.35083159e-03, -4.99999970e-02, -3.93649191e-01, 4.99999970e-02, 6.35083159e-03, 4.99999970e-02, 3.93649191e-01]],

        [[-3.93649191e-01, 3.93649191e-01, 4.99999970e-02, -4.99999970e-02, -4.99999970e-02, 4.99999970e-02, 6.35083159e-03, -6.35083159e-03],
         [-2.21824586e-01, -2.21824586e-01, 2.21824586e-01, 2.21824586e-01, -
             2.81754136e-02, -2.81754136e-02, 2.81754136e-02, 2.81754136e-02],
         [-2.21824586e-01, -2.21824586e-01, -2.81754136e-02, -2.81754136e-02, 2.21824586e-01, 2.21824586e-01, 2.81754136e-02, 2.81754136e-02]],

        [[-2.21824586e-01, 2.21824586e-01, 2.81754136e-02, -2.81754136e-02, -2.21824586e-01, 2.21824586e-01, 2.81754136e-02, -2.81754136e-02],
         [-1.25000000e-01, -1.25000000e-01, 1.25000000e-01, 1.25000000e-01, -
             1.25000000e-01, -1.25000000e-01, 1.25000000e-01, 1.25000000e-01],
         [-2.21824586e-01, -2.21824586e-01, -2.81754136e-02, -2.81754136e-02, 2.21824586e-01, 2.21824586e-01, 2.81754136e-02, 2.81754136e-02]],

        [[-4.99999970e-02, 4.99999970e-02, 6.35083159e-03, -6.35083159e-03, -3.93649191e-01, 3.93649191e-01, 4.99999970e-02, -4.99999970e-02],
         [-2.81754136e-02, -2.81754136e-02, 2.81754136e-02, 2.81754136e-02, -
             2.21824586e-01, -2.21824586e-01, 2.21824586e-01, 2.21824586e-01],
         [-2.21824586e-01, -2.21824586e-01, -2.81754136e-02, -2.81754136e-02, 2.21824586e-01, 2.21824586e-01, 2.81754136e-02, 2.81754136e-02]],

        [[-2.21824586e-01, 2.21824586e-01, 2.21824586e-01, -2.21824586e-01, -2.81754136e-02, 2.81754136e-02, 2.81754136e-02, -2.81754136e-02],
         [-2.21824586e-01, -2.21824586e-01, 2.21824586e-01, 2.21824586e-01, -
             2.81754136e-02, -2.81754136e-02, 2.81754136e-02, 2.81754136e-02],
         [-1.25000000e-01, -1.25000000e-01, -1.25000000e-01, -1.25000000e-01, 1.25000000e-01, 1.25000000e-01, 1.25000000e-01, 1.25000000e-01]],

        [[-1.25000000e-01, 1.25000000e-01, 1.25000000e-01, -1.25000000e-01, -1.25000000e-01, 1.25000000e-01, 1.25000000e-01, -1.25000000e-01],
         [-1.25000000e-01, -1.25000000e-01, 1.25000000e-01, 1.25000000e-01, -
             1.25000000e-01, -1.25000000e-01, 1.25000000e-01, 1.25000000e-01],
         [-1.25000000e-01, -1.25000000e-01, -1.25000000e-01, -1.25000000e-01, 1.25000000e-01, 1.25000000e-01, 1.25000000e-01, 1.25000000e-01]],

        [[-2.81754136e-02, 2.81754136e-02, 2.81754136e-02, -2.81754136e-02, -2.21824586e-01, 2.21824586e-01, 2.21824586e-01, -2.21824586e-01],
         [-2.81754136e-02, -2.81754136e-02, 2.81754136e-02, 2.81754136e-02, -
             2.21824586e-01, -2.21824586e-01, 2.21824586e-01, 2.21824586e-01],
         [-1.25000000e-01, -1.25000000e-01, -1.25000000e-01, -1.25000000e-01, 1.25000000e-01, 1.25000000e-01, 1.25000000e-01, 1.25000000e-01]],

        [[-4.99999970e-02, 4.99999970e-02, 3.93649191e-01, -3.93649191e-01, -6.35083159e-03, 6.35083159e-03, 4.99999970e-02, -4.99999970e-02],
         [-2.21824586e-01, -2.21824586e-01, 2.21824586e-01, 2.21824586e-01, -
             2.81754136e-02, -2.81754136e-02, 2.81754136e-02, 2.81754136e-02],
         [-2.81754136e-02, -2.81754136e-02, -2.21824586e-01, -2.21824586e-01, 2.81754136e-02, 2.81754136e-02, 2.21824586e-01, 2.21824586e-01]],

        [[-2.81754136e-02, 2.81754136e-02, 2.21824586e-01, -2.21824586e-01, -2.81754136e-02, 2.81754136e-02, 2.21824586e-01, -2.21824586e-01],
         [-1.25000000e-01, -1.25000000e-01, 1.25000000e-01, 1.25000000e-01, -
             1.25000000e-01, -1.25000000e-01, 1.25000000e-01, 1.25000000e-01],
         [-2.81754136e-02, -2.81754136e-02, -2.21824586e-01, -2.21824586e-01, 2.81754136e-02, 2.81754136e-02, 2.21824586e-01, 2.21824586e-01]],

        [[-6.35083159e-03, 6.35083159e-03, 4.99999970e-02, -4.99999970e-02, -4.99999970e-02, 4.99999970e-02, 3.93649191e-01, -3.93649191e-01],
         [-2.81754136e-02, -2.81754136e-02, 2.81754136e-02, 2.81754136e-02, -
             2.21824586e-01, -2.21824586e-01, 2.21824586e-01, 2.21824586e-01],
         [-2.81754136e-02, -2.81754136e-02, -2.21824586e-01, -2.21824586e-01, 2.81754136e-02, 2.81754136e-02, 2.21824586e-01, 2.21824586e-01]],

        [[-3.93649191e-01, 3.93649191e-01, 4.99999970e-02, -4.99999970e-02, -4.99999970e-02, 4.99999970e-02, 6.35083159e-03, -6.35083159e-03],
         [-4.99999970e-02, -3.93649191e-01, 3.93649191e-01, 4.99999970e-02, -
             6.35083159e-03, -4.99999970e-02, 4.99999970e-02, 6.35083159e-03],
         [-4.99999970e-02, -3.93649191e-01, -4.99999970e-02, -6.35083159e-03, 4.99999970e-02, 3.93649191e-01, 4.99999970e-02, 6.35083159e-03]],

        [[-2.21824586e-01, 2.21824586e-01, 2.81754136e-02, -2.81754136e-02, -2.21824586e-01, 2.21824586e-01, 2.81754136e-02, -2.81754136e-02],
         [-2.81754136e-02, -2.21824586e-01, 2.21824586e-01, 2.81754136e-02, -
             2.81754136e-02, -2.21824586e-01, 2.21824586e-01, 2.81754136e-02],
         [-4.99999970e-02, -3.93649191e-01, -4.99999970e-02, -6.35083159e-03, 4.99999970e-02, 3.93649191e-01, 4.99999970e-02, 6.35083159e-03]],

        [[-4.99999970e-02, 4.99999970e-02, 6.35083159e-03, -6.35083159e-03, -3.93649191e-01, 3.93649191e-01, 4.99999970e-02, -4.99999970e-02],
         [-6.35083159e-03, -4.99999970e-02, 4.99999970e-02, 6.35083159e-03, -
             4.99999970e-02, -3.93649191e-01, 3.93649191e-01, 4.99999970e-02],
         [-4.99999970e-02, -3.93649191e-01, -4.99999970e-02, -6.35083159e-03, 4.99999970e-02, 3.93649191e-01, 4.99999970e-02, 6.35083159e-03]],

        [[-2.21824586e-01, 2.21824586e-01, 2.21824586e-01, -2.21824586e-01, -2.81754136e-02, 2.81754136e-02, 2.81754136e-02, -2.81754136e-02],
         [-4.99999970e-02, -3.93649191e-01, 3.93649191e-01, 4.99999970e-02, -
             6.35083159e-03, -4.99999970e-02, 4.99999970e-02, 6.35083159e-03],
         [-2.81754136e-02, -2.21824586e-01, -2.21824586e-01, -2.81754136e-02, 2.81754136e-02, 2.21824586e-01, 2.21824586e-01, 2.81754136e-02]],

        [[-1.25000000e-01, 1.25000000e-01, 1.25000000e-01, -1.25000000e-01, -1.25000000e-01, 1.25000000e-01, 1.25000000e-01, -1.25000000e-01],
         [-2.81754136e-02, -2.21824586e-01, 2.21824586e-01, 2.81754136e-02, -
             2.81754136e-02, -2.21824586e-01, 2.21824586e-01, 2.81754136e-02],
         [-2.81754136e-02, -2.21824586e-01, -2.21824586e-01, -2.81754136e-02, 2.81754136e-02, 2.21824586e-01, 2.21824586e-01, 2.81754136e-02]],

        [[-2.81754136e-02, 2.81754136e-02, 2.81754136e-02, -2.81754136e-02, -2.21824586e-01, 2.21824586e-01, 2.21824586e-01, -2.21824586e-01],
         [-6.35083159e-03, -4.99999970e-02, 4.99999970e-02, 6.35083159e-03, -
             4.99999970e-02, -3.93649191e-01, 3.93649191e-01, 4.99999970e-02],
         [-2.81754136e-02, -2.21824586e-01, -2.21824586e-01, -2.81754136e-02, 2.81754136e-02, 2.21824586e-01, 2.21824586e-01, 2.81754136e-02]],

        [[-4.99999970e-02, 4.99999970e-02, 3.93649191e-01, -3.93649191e-01, -6.35083159e-03, 6.35083159e-03, 4.99999970e-02, -4.99999970e-02],
         [-4.99999970e-02, -3.93649191e-01, 3.93649191e-01, 4.99999970e-02, -
             6.35083159e-03, -4.99999970e-02, 4.99999970e-02, 6.35083159e-03],
         [-6.35083159e-03, -4.99999970e-02, -3.93649191e-01, -4.99999970e-02, 6.35083159e-03, 4.99999970e-02, 3.93649191e-01, 4.99999970e-02]],

        [[-2.81754136e-02, 2.81754136e-02, 2.21824586e-01, -2.21824586e-01, -2.81754136e-02, 2.81754136e-02, 2.21824586e-01, -2.21824586e-01],
         [-2.81754136e-02, -2.21824586e-01, 2.21824586e-01, 2.81754136e-02, -
             2.81754136e-02, -2.21824586e-01, 2.21824586e-01, 2.81754136e-02],
         [-6.35083159e-03, -4.99999970e-02, -3.93649191e-01, -4.99999970e-02, 6.35083159e-03, 4.99999970e-02, 3.93649191e-01, 4.99999970e-02]],

        [[-6.35083159e-03, 6.35083159e-03, 4.99999970e-02, -4.99999970e-02, -4.99999970e-02, 4.99999970e-02, 3.93649191e-01, -3.93649191e-01],
         [-6.35083159e-03, -4.99999970e-02, 4.99999970e-02, 6.35083159e-03, -
             4.99999970e-02, -3.93649191e-01, 3.93649191e-01, 4.99999970e-02],
         [-6.35083159e-03, -4.99999970e-02, -3.93649191e-01, -4.99999970e-02, 6.35083159e-03, 4.99999970e-02, 3.93649191e-01, 4.99999970e-02]]],dtype=hex.dtype,
        device=hex.device)

    weights = torch.as_tensor([[1.71467781e-01],
                              [2.74348438e-01],
                               [1.71467781e-01],
                               [2.74348468e-01],
                               [4.38957512e-01],
                               [2.74348468e-01],
                               [1.71467781e-01],
                               [2.74348438e-01],
                               [1.71467781e-01],
                               [2.74348468e-01],
                               [4.38957512e-01],
                               [2.74348468e-01],
                               [4.38957512e-01],
                               [7.02331960e-01],
                               [4.38957512e-01],
                               [2.74348468e-01],
                               [4.38957512e-01],
                               [2.74348468e-01],
                               [1.71467781e-01],
                               [2.74348438e-01],
                               [1.71467781e-01],
                               [2.74348468e-01],
                               [4.38957512e-01],
                               [2.74348468e-01],
                               [1.71467781e-01],
                               [2.74348438e-01],
                               [1.71467781e-01]],dtype=hex.dtype, device=hex.device)

    # coumpute jacobian 27 * 3 * 3
    J = torch.matmul(partial_N, hex)

    # compute weight 27*1
    w = (J.det().unsqueeze(1)*weights).unsqueeze(2)

    # compute the inverse of partial N 27 * 3 * 8
    inv_J = J.inverse()
    inv_N = (inv_J@partial_N)

    # assigned local geometry matrix B 27*6*24
    B = torch.as_tensor(inv_N.unsqueeze(1).repeat(1, 6, 1, 1)*0, dtype=hex.dtype)
    idx_B = torch.as_tensor([[0, 1, 2, 3, 3, 4, 4, 5, 5], [
                              0, 1, 2, 0, 1, 1, 2, 0, 2]], dtype=torch.int64, device=hex.device)
    idx_inv_N = torch.as_tensor(
        [0, 1, 2, 1, 0, 2, 1, 2, 0], dtype=torch.int64, device=hex.device)
    B[:, idx_B[0], idx_B[1], :] = inv_N[:, idx_inv_N, :]

    B = B.transpose(2, 3).contiguous().view(27, 6, 24)

    # Gaussian integration
    # k=B^T @ C @ B *w

    stiffness = (B.transpose(1, 2)@elastic_tensor@B*w).sum(0)
    force=(B.transpose(1, 2)@elastic_tensor*w).sum(0)
    return stiffness,force


def isotropic_elastic_tensor(E, v):
    Lambda = v / (1. + v) / (1 - 2. * v)*E
    Mu = 1. / (2.*(1. + v))*E

    return torch.as_tensor([ 
		[Lambda + 2 * Mu, Lambda, Lambda, 0, 0, 0],
		[Lambda, Lambda + 2 * Mu, Lambda, 0, 0, 0],
		[Lambda, Lambda, Lambda + 2 * Mu, 0, 0, 0],
		[0, 0, 0, Mu, 0, 0],
		[0, 0, 0, 0, Mu, 0],
		[0, 0, 0, 0, 0, Mu]]).cuda()

def shape_material_transform(material, J):
    if J.dim()==2:
        MA = torch.tensor([[torch.square(J[0, 0]), torch.square(J[0, 1]), torch.square(J[0, 2]),
                            J[0, 0] * J[0, 1], J[0, 1] * J[0, 2], J[0, 0] * J[0, 2]],
                        [torch.square(J[1, 0]), torch.square(J[1, 1]), torch.square(J[1, 2]),
                            J[1, 0] * J[1, 1], J[1, 1] * J[1, 2], J[1, 0] * J[1, 2]],
                        [torch.square(J[2, 0]), torch.square(J[2, 1]), torch.square(J[2, 2]),
                            J[2, 0] * J[2, 1], J[2, 1] * J[2, 2], J[2, 0] * J[2, 2]],
                        [2 * J[0, 0] * J[1, 0], 2 * J[0, 1] * J[1, 1],
                            2 * J[0, 2] * J[1, 2], J[0, 0] * J[1, 1] + J[0, 1] * J[1, 0],
                            J[0, 1] * J[1, 2] + J[0, 2] * J[1, 1],
                            J[0, 0] * J[1, 2] + J[0, 2] * J[1, 0]],
                        [2 * J[1, 0] * J[2, 0], 2 * J[1, 1] * J[2, 1],
                            2 * J[1, 2] * J[2, 2], J[1,0] * J[2, 1] + J[1, 1] * J[2, 0],
                            J[1, 1] * J[2, 2] + J[1, 2] * J[2, 1],
                            J[1, 0] * J[2, 2] + J[1, 2] * J[2, 0]],
                        [2 * J[2, 0] * J[0, 0], 2 * J[2, 1] * J[0, 1],
                            2 * J[2, 2] * J[0, 2], J[2, 0] * J[0, 1] + J[2, 1] * J[0, 0],
                            J[2, 1] * J[0, 2] + J[2, 2] * J[0, 1],
                            J[2, 0] * J[0, 2] + J[2, 2] * J[0, 0]],
                        ], dtype=material.dtype, device=material.device)

        return MA.t() @ material @ MA

    elif J.dim()==3:
        MA=torch.empty(J.shape[0],6,6, dtype=material.dtype, device=material.device)
        MA[:,0,:]=torch.vstack([torch.square(J[:,0, 0]), torch.square(J[:,0, 1]), torch.square(J[:,0, 2]),J[:,0, 0] * J[:,0, 1], J[:,0, 1] * J[:,0, 2], J[:,0, 0] * J[:,0, 2]]).t()
        MA[:,1,:]=torch.vstack([torch.square(J[:,1, 0]), torch.square(J[:,1, 1]), torch.square(J[:,1, 2]),J[:,1, 0] * J[:,1, 1], J[:,1, 1] * J[:,1, 2], J[:,1, 0] * J[:,1, 2]]).t()
        MA[:,2,:]=torch.vstack([torch.square(J[:,2, 0]), torch.square(J[:,2, 1]), torch.square(J[:,2, 2]),J[:,2, 0] * J[:,2, 1], J[:,2, 1] * J[:,2, 2], J[:,2, 0] * J[:,2, 2]]).t()
        MA[:,3,:]=torch.vstack([2 * J[:,0, 0] * J[:,1, 0], 2 * J[:,0, 1] * J[:,1, 1],2 * J[:,0, 2] * J[:,1, 2], J[:,0, 0] * J[:,1, 1] + J[:,0, 1] * J[:,1, 0],J[:,0, 1] * J[:,1, 2] + J[:,0, 2] * J[:,1, 1],J[:,0, 0] * J[:,1, 2] + J[:,0, 2] * J[:,1, 0]]).t()
        MA[:,4,:]=torch.vstack([2 * J[:,1, 0] * J[:,2, 0], 2 * J[:,1, 1] * J[:,2, 1],2 * J[:,1, 2] * J[:,2, 2], J[:,1, 0] * J[:,2, 1] + J[:,1, 1] * J[:,2, 0],J[:,1, 1] * J[:,2, 2] + J[:,1, 2] * J[:,2, 1],J[:,1, 0] * J[:,2, 2] + J[:,1, 2] * J[:,2, 0]]).t()
        MA[:,5,:]=torch.vstack([2 * J[:,2, 0] * J[:,0, 0], 2 * J[:,2, 1] * J[:,0, 1],2 * J[:,2, 2] * J[:,0, 2], J[:,2, 0] * J[:,0, 1] + J[:,2, 1] * J[:,0, 0],J[:,2, 1] * J[:,0, 2] + J[:,2, 2] * J[:,0, 1],J[:,2, 0] * J[:,0, 2] + J[:,2, 2] * J[:,0, 0]]).t()
                       
        return MA.transpose(1,2) @ material @ MA
    

def shape_material_transform_parallel(material, J):

    MA_=J.repeat(3,2)*0
    vogit= torch.as_tensor([0,4,8,1,5,2,3,7,6], dtype=torch.int64, device=J.device)
    idx=torch.as_tensor([[0,0],[1,1],[2,2],[0,1],[1,2],[0,2]])

    for i in range(6):
            MA_[:,i]=(J[:,idx[i,0]]@J[:,idx[i,1]].t()).reshape(-1,1)[vogit]

    MA=MA_[:6]
    MA[3:6]=MA_[3:6]+MA_[6:9]

    return MA.t() @ material @ MA

def vector_rotation(a, b):
    v = torch.cross(a, b)
    s = v.norm(dim=-1)

    if a.dim() == 1:
        c=torch.dot(a,b)
        if c == 1:
            return torch.eye(3, dtype=a.dtype,device=a.device)
        elif c == -1:
            return -torch.eye(3,dtype=a.dtype, device=a.device)

        else:
            V = torch.tensor([[0, -v[2], v[1]],
                              [v[2], 0, -v[0]],
                              [-v[1], v[0], 0]],dtype=a.dtype, device=a.device)
            return torch.eye(3,dtype=a.dtype, device=a.device)+V+(1-c)/(s*s)*V@V
    else:
        c = torch.matmul(a, b[0])
        results = torch.empty(a.shape[0], 3, 3,dtype=a.dtype, device=a.device)
        eye = torch.eye(3,dtype=a.dtype, device=a.device)

        results[c == 1] = eye
        results[c == -1] = -eye

        rest = torch.logical_not(torch.logical_or(c == 1, c == -1))
        nr = rest.count_nonzero()

        if nr > 0:
            V = torch.zeros(nr, 3, 3, dtype=a.dtype,device=a.device)

            V[:, 0, 1] = -v[rest, 2]
            V[:, 0, 2] = v[rest, 1]
            V[:, 1, 0] = v[rest, 2]
            V[:, 1, 2] = -v[rest, 0]
            V[:, 2, 0] = -v[rest, 1]
            V[:, 2, 1] = v[rest, 0]
            
            w = ((1-c)/(s*s)).unsqueeze(-1).unsqueeze(-1).expand(-1, 3, 3)
            results[rest] = eye+V+w[rest]*torch.matmul(V, V)

        return results


def visual(CH):

    sphere=pv.Sphere(radius=1)
    sn=torch.from_numpy(sphere.points).to(CH.device)
    chn = torch.tensor( [0, 0, 1.], dtype=CH.dtype, device=CH.device).expand(sn.shape[0], -1)
    R=vector_rotation(chn,sn)
    CH_=shape_material_transform(CH,R)
    SH=CH_.inverse()
    E=(1/SH[:,0,0]).cpu().numpy()

    sphere.points=sphere.points*E
    sphere.point_data['E']=E
    sphere.active_scalars='E'
    sphere.plot(cmap='jet')

